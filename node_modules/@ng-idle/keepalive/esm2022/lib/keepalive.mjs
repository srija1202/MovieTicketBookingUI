import { EventEmitter, Injectable } from '@angular/core';
import { HttpRequest } from '@angular/common/http';
import { KeepaliveSvc } from '@ng-idle/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * An example of an injectable service.
 */
export class Keepalive extends KeepaliveSvc {
    /*
     * Initializes a new instance of Keepalive
     * @param http - The HTTP service.
     */
    constructor(http, zone) {
        super();
        this.http = http;
        this.zone = zone;
        this.pingInterval = 10 * 60;
        /*
         * An event emitted when the service is pinging.
         */
        this.onPing = new EventEmitter();
        /*
         * An event emitted when the service has pinged an HTTP endpoint and received a response.
         */
        this.onPingResponse = new EventEmitter();
    }
    /*
     * Sets the string or Request that should be used when pinging.
     * @param url - The URL or Request object to use when pinging.
     * @return The current Request used when pinging.
     */
    request(url) {
        if (typeof url === 'string') {
            this.pingRequest = new HttpRequest('GET', url);
        }
        else if (url instanceof HttpRequest) {
            this.pingRequest = url;
        }
        else if (url === null) {
            this.pingRequest = null;
        }
        return this.pingRequest;
    }
    /*
     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
     * @param seconds - The ping interval in seconds.
     * @return The current interval value.
     */
    interval(seconds) {
        if (!isNaN(seconds) && seconds > 0) {
            this.pingInterval = seconds;
        }
        else if (!isNaN(seconds) && seconds <= 0) {
            throw new Error('Interval value must be greater than zero.');
        }
        return this.pingInterval;
    }
    /*
     * Immediately performs the ping operation. If a request has been set, an HTTP
     * request will be made and the response will be emitted via the
     * onPingResponse event.
     */
    ping() {
        this.onPing.emit(null);
        if (this.pingRequest) {
            this.http.request(this.pingRequest).subscribe((response) => {
                this.onPingResponse.emit(response);
            }, (error) => {
                this.onPingResponse.emit(error);
            });
        }
    }
    /*
     * Starts pinging on an interval.
     */
    start() {
        this.stop();
        this.zone.runOutsideAngular(() => {
            this.pingHandle = setInterval(() => {
                this.zone.run(() => {
                    this.ping();
                });
            }, this.pingInterval * 1000);
        });
    }
    /*
     * Stops pinging on an interval.
     */
    stop() {
        if (this.hasPingHandle()) {
            clearInterval(this.pingHandle);
            this.pingHandle = null;
        }
    }
    /*
     * Performs any cleanup tasks when Angular destroys the instance.
     */
    ngOnDestroy() {
        this.stop();
    }
    /*
     * Returns whether or not the service will ping automatically at the specified interval.
     * @return True if the service will ping at the specified interval; otherwise, false.
     */
    isRunning() {
        return this.hasPingHandle();
    }
    hasPingHandle() {
        return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.9", ngImport: i0, type: Keepalive, deps: [{ token: i1.HttpClient }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.9", ngImport: i0, type: Keepalive }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.9", ngImport: i0, type: Keepalive, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2VlcGFsaXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMva2VlcGFsaXZlL3NyYy9saWIva2VlcGFsaXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQWMsV0FBVyxFQUFnQixNQUFNLHNCQUFzQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUU3Qzs7R0FFRztBQUVILE1BQU0sT0FBTyxTQUFVLFNBQVEsWUFBWTtJQWlCekM7OztPQUdHO0lBQ0gsWUFBb0IsSUFBZ0IsRUFBVSxJQUFZO1FBQ3hELEtBQUssRUFBRSxDQUFDO1FBRFUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLFNBQUksR0FBSixJQUFJLENBQVE7UUFuQmxELGlCQUFZLEdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUd2Qzs7V0FFRztRQUNJLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV0RDs7V0FFRztRQUNJLG1CQUFjLEdBQW9DLElBQUksWUFBWSxFQUV0RSxDQUFDO0lBUUosQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPLENBQUksR0FBNkI7UUFDdEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBSSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDbkQ7YUFBTSxJQUFJLEdBQUcsWUFBWSxXQUFXLEVBQUU7WUFDckMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7U0FDeEI7YUFBTSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDekI7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsT0FBZ0I7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1NBQzdCO2FBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxFQUFFO1lBQzFDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUM5RDtRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUk7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FDM0MsQ0FBQyxRQUEyQixFQUFFLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsRUFDRCxDQUFDLEtBQXdCLEVBQUUsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUNGLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtvQkFDakIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJO1FBQ0YsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDeEIsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTyxhQUFhO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFdBQVcsQ0FBQztJQUM1RSxDQUFDOzhHQXRIVSxTQUFTO2tIQUFULFNBQVM7OzJGQUFULFNBQVM7a0JBRHJCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgS2VlcGFsaXZlU3ZjIH0gZnJvbSAnQG5nLWlkbGUvY29yZSc7XG5cbi8qKlxuICogQW4gZXhhbXBsZSBvZiBhbiBpbmplY3RhYmxlIHNlcnZpY2UuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBLZWVwYWxpdmUgZXh0ZW5kcyBLZWVwYWxpdmVTdmMgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHBpbmdSZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+O1xuICBwcml2YXRlIHBpbmdJbnRlcnZhbDogbnVtYmVyID0gMTAgKiA2MDtcbiAgcHJpdmF0ZSBwaW5nSGFuZGxlOiBhbnk7XG5cbiAgLypcbiAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBzZXJ2aWNlIGlzIHBpbmdpbmcuXG4gICAqL1xuICBwdWJsaWMgb25QaW5nOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKlxuICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIHNlcnZpY2UgaGFzIHBpbmdlZCBhbiBIVFRQIGVuZHBvaW50IGFuZCByZWNlaXZlZCBhIHJlc3BvbnNlLlxuICAgKi9cbiAgcHVibGljIG9uUGluZ1Jlc3BvbnNlOiBFdmVudEVtaXR0ZXI8SHR0cFJlc3BvbnNlPGFueT4+ID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBIdHRwUmVzcG9uc2U8YW55PlxuICA+KCk7XG5cbiAgLypcbiAgICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgS2VlcGFsaXZlXG4gICAqIEBwYXJhbSBodHRwIC0gVGhlIEhUVFAgc2VydmljZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSB6b25lOiBOZ1pvbmUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLypcbiAgICogU2V0cyB0aGUgc3RyaW5nIG9yIFJlcXVlc3QgdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIHBpbmdpbmcuXG4gICAqIEBwYXJhbSB1cmwgLSBUaGUgVVJMIG9yIFJlcXVlc3Qgb2JqZWN0IHRvIHVzZSB3aGVuIHBpbmdpbmcuXG4gICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgUmVxdWVzdCB1c2VkIHdoZW4gcGluZ2luZy5cbiAgICovXG4gIHJlcXVlc3Q8VD4odXJsPzogc3RyaW5nIHwgSHR0cFJlcXVlc3Q8VD4pOiBIdHRwUmVxdWVzdDxUPiB7XG4gICAgaWYgKHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnBpbmdSZXF1ZXN0ID0gbmV3IEh0dHBSZXF1ZXN0PFQ+KCdHRVQnLCB1cmwpO1xuICAgIH0gZWxzZSBpZiAodXJsIGluc3RhbmNlb2YgSHR0cFJlcXVlc3QpIHtcbiAgICAgIHRoaXMucGluZ1JlcXVlc3QgPSB1cmw7XG4gICAgfSBlbHNlIGlmICh1cmwgPT09IG51bGwpIHtcbiAgICAgIHRoaXMucGluZ1JlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBpbmdSZXF1ZXN0O1xuICB9XG5cbiAgLypcbiAgICogU2V0cyB0aGUgaW50ZXJ2YWwgKGluIHNlY29uZHMpIGF0IHdoaWNoIHRoZSBwaW5nIG9wZXJhdGlvbiB3aWxsIG9jY3VyIHdoZW4gc3RhcnQoKSBpcyBjYWxsZWQuXG4gICAqIEBwYXJhbSBzZWNvbmRzIC0gVGhlIHBpbmcgaW50ZXJ2YWwgaW4gc2Vjb25kcy5cbiAgICogQHJldHVybiBUaGUgY3VycmVudCBpbnRlcnZhbCB2YWx1ZS5cbiAgICovXG4gIGludGVydmFsKHNlY29uZHM/OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICghaXNOYU4oc2Vjb25kcykgJiYgc2Vjb25kcyA+IDApIHtcbiAgICAgIHRoaXMucGluZ0ludGVydmFsID0gc2Vjb25kcztcbiAgICB9IGVsc2UgaWYgKCFpc05hTihzZWNvbmRzKSAmJiBzZWNvbmRzIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW50ZXJ2YWwgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5waW5nSW50ZXJ2YWw7XG4gIH1cblxuICAvKlxuICAgKiBJbW1lZGlhdGVseSBwZXJmb3JtcyB0aGUgcGluZyBvcGVyYXRpb24uIElmIGEgcmVxdWVzdCBoYXMgYmVlbiBzZXQsIGFuIEhUVFBcbiAgICogcmVxdWVzdCB3aWxsIGJlIG1hZGUgYW5kIHRoZSByZXNwb25zZSB3aWxsIGJlIGVtaXR0ZWQgdmlhIHRoZVxuICAgKiBvblBpbmdSZXNwb25zZSBldmVudC5cbiAgICovXG4gIHBpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5vblBpbmcuZW1pdChudWxsKTtcbiAgICBpZiAodGhpcy5waW5nUmVxdWVzdCkge1xuICAgICAgdGhpcy5odHRwLnJlcXVlc3QodGhpcy5waW5nUmVxdWVzdCkuc3Vic2NyaWJlKFxuICAgICAgICAocmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+KSA9PiB7XG4gICAgICAgICAgdGhpcy5vblBpbmdSZXNwb25zZS5lbWl0KHJlc3BvbnNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgKGVycm9yOiBIdHRwUmVzcG9uc2U8YW55PikgPT4ge1xuICAgICAgICAgIHRoaXMub25QaW5nUmVzcG9uc2UuZW1pdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogU3RhcnRzIHBpbmdpbmcgb24gYW4gaW50ZXJ2YWwuXG4gICAqL1xuICBzdGFydCgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3AoKTtcblxuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLnBpbmdIYW5kbGUgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMucGluZygpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHRoaXMucGluZ0ludGVydmFsICogMTAwMCk7XG4gICAgfSk7XG4gIH1cblxuICAvKlxuICAgKiBTdG9wcyBwaW5naW5nIG9uIGFuIGludGVydmFsLlxuICAgKi9cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5oYXNQaW5nSGFuZGxlKCkpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5waW5nSGFuZGxlKTtcbiAgICAgIHRoaXMucGluZ0hhbmRsZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogUGVyZm9ybXMgYW55IGNsZWFudXAgdGFza3Mgd2hlbiBBbmd1bGFyIGRlc3Ryb3lzIHRoZSBpbnN0YW5jZS5cbiAgICovXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcCgpO1xuICB9XG5cbiAgLypcbiAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgc2VydmljZSB3aWxsIHBpbmcgYXV0b21hdGljYWxseSBhdCB0aGUgc3BlY2lmaWVkIGludGVydmFsLlxuICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIHNlcnZpY2Ugd2lsbCBwaW5nIGF0IHRoZSBzcGVjaWZpZWQgaW50ZXJ2YWw7IG90aGVyd2lzZSwgZmFsc2UuXG4gICAqL1xuICBpc1J1bm5pbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzUGluZ0hhbmRsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNQaW5nSGFuZGxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBpbmdIYW5kbGUgIT09IG51bGwgJiYgdHlwZW9mIHRoaXMucGluZ0hhbmRsZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIH1cbn1cbiJdfQ==