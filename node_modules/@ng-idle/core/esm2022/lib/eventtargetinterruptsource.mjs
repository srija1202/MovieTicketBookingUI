import { isPlatformServer } from '@angular/common';
import { Subscription, fromEvent, merge } from 'rxjs';
import { filter, throttleTime } from 'rxjs/operators';
import { InterruptArgs } from './interruptargs';
import { InterruptSource } from './interruptsource';
const defaultThrottleDelay = 500;
/*
 * An interrupt source on an EventTarget object, such as a Window or HTMLElement.
 */
export class EventTargetInterruptSource extends InterruptSource {
    constructor(target, events, opts) {
        super(null, null);
        this.target = target;
        this.events = events;
        this.opts = opts;
        this.eventSubscription = new Subscription();
        if (typeof this.opts === 'number') {
            this.opts = { throttleDelay: this.opts, passive: false };
        }
        this.opts = this.opts || {
            passive: false,
            throttleDelay: defaultThrottleDelay
        };
        if (this.opts.throttleDelay === undefined || this.opts.throttleDelay === null) {
            this.opts.throttleDelay = defaultThrottleDelay;
        }
        this.throttleDelay = this.opts.throttleDelay;
        this.passive = !!this.opts.passive;
    }
    initialize(options) {
        if (options?.platformId && isPlatformServer(options.platformId)) {
            return;
        }
        const eventTarget = typeof this.target === 'function' ? this.target() : this.target;
        const opts = this.passive ? { passive: true } : null;
        const fromEvents = this.events
            .split(' ')
            .map(eventName => fromEvent(eventTarget, eventName, opts));
        this.eventSrc = merge(...fromEvents);
        this.eventSrc = this.eventSrc.pipe(filter(innerArgs => !this.filterEvent(innerArgs)));
        if (this.throttleDelay > 0) {
            this.eventSrc = this.eventSrc.pipe(throttleTime(this.throttleDelay));
        }
        const handler = (innerArgs) => this.onInterrupt.emit(new InterruptArgs(this, innerArgs));
        this.attachFn = () => (this.eventSubscription = this.eventSrc.subscribe(handler));
        this.detachFn = () => this.eventSubscription.unsubscribe();
    }
    /*
     * Checks to see if the event should be filtered. Always returns false unless overriden.
     * @param event - The original event object.
     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
     */
    filterEvent(event) {
        return false;
    }
    /**
     * Returns the current options being used.
     * @return The current option values.
     */
    get options() {
        return {
            passive: this.passive,
            throttleDelay: this.throttleDelay
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnR0YXJnZXRpbnRlcnJ1cHRzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvZXZlbnR0YXJnZXRpbnRlcnJ1cHRzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFjLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQWtCcEQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUM7QUFFakM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsZUFBZTtJQU03RCxZQUNZLE1BQW1ELEVBQ25ELE1BQWMsRUFDaEIsSUFBMkM7UUFFbkQsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUpSLFdBQU0sR0FBTixNQUFNLENBQTZDO1FBQ25ELFdBQU0sR0FBTixNQUFNLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBdUM7UUFQN0Msc0JBQWlCLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFXM0QsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDMUQ7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUk7WUFDdkIsT0FBTyxFQUFFLEtBQUs7WUFDZCxhQUFhLEVBQUUsb0JBQW9CO1NBQ3BDLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDN0UsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsb0JBQW9CLENBQUM7U0FDaEQ7UUFFRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxVQUFVLENBQUMsT0FBMEI7UUFDbkMsSUFBSSxPQUFPLEVBQUUsVUFBVSxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMvRCxPQUFPO1NBQ1I7UUFFRCxNQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDcEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTTthQUMzQixLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ1YsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQWtCLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDbEQsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7U0FDdEU7UUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFDLFNBQWMsRUFBRSxFQUFFLENBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTVELElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQ25CLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDN0QsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxXQUFXLENBQUMsS0FBVTtRQUM5QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLE9BQU87UUFDVCxPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUNsQyxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24sIGZyb21FdmVudCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgdGhyb3R0bGVUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBFdmVudFRhcmdldCB9IGZyb20gJy4vZXZlbnR0YXJnZXQnO1xuaW1wb3J0IHsgSW50ZXJydXB0QXJncyB9IGZyb20gJy4vaW50ZXJydXB0YXJncyc7XG5pbXBvcnQgeyBJbnRlcnJ1cHRPcHRpb25zIH0gZnJvbSAnLi9pbnRlcnJ1cHRvcHRpb25zJztcbmltcG9ydCB7IEludGVycnVwdFNvdXJjZSB9IGZyb20gJy4vaW50ZXJydXB0c291cmNlJztcblxuLyoqXG4gKiBPcHRpb25zIGZvciBFdmVudFRhcmdldEludGVycnVwdFNvdXJjZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50VGFyZ2V0SW50ZXJydXB0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSB0aGUgZXZlbnRzIGNvbWluZyBmcm9tIHRoZSB0YXJnZXQuXG4gICAqL1xuICB0aHJvdHRsZURlbGF5PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byB1c2UgcGFzc2l2ZSBldmVudCBsaXN0ZW5lcnMuXG4gICAqIE5vdGU6IHlvdSBuZWVkIHRvIGRldGVjdCBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBwYXNzaXZlIGxpc3RlbmVycywgYW5kIG9ubHkgc2V0IHRoaXMgdG8gdHJ1ZSBpZiBpdCBkb2VzLlxuICAgKi9cbiAgcGFzc2l2ZT86IGJvb2xlYW47XG59XG5cbmNvbnN0IGRlZmF1bHRUaHJvdHRsZURlbGF5ID0gNTAwO1xuXG4vKlxuICogQW4gaW50ZXJydXB0IHNvdXJjZSBvbiBhbiBFdmVudFRhcmdldCBvYmplY3QsIHN1Y2ggYXMgYSBXaW5kb3cgb3IgSFRNTEVsZW1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudFRhcmdldEludGVycnVwdFNvdXJjZSBleHRlbmRzIEludGVycnVwdFNvdXJjZSB7XG4gIHByaXZhdGUgZXZlbnRTcmM6IE9ic2VydmFibGU8YW55PjtcbiAgcHJpdmF0ZSBldmVudFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICBwcm90ZWN0ZWQgdGhyb3R0bGVEZWxheTogbnVtYmVyO1xuICBwcm90ZWN0ZWQgcGFzc2l2ZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdGFyZ2V0OiBFdmVudFRhcmdldDxhbnk+IHwgKCgpID0+IEV2ZW50VGFyZ2V0PGFueT4pLFxuICAgIHByb3RlY3RlZCBldmVudHM6IHN0cmluZyxcbiAgICBwcml2YXRlIG9wdHM/OiBudW1iZXIgfCBFdmVudFRhcmdldEludGVycnVwdE9wdGlvbnNcbiAgKSB7XG4gICAgc3VwZXIobnVsbCwgbnVsbCk7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMub3B0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMub3B0cyA9IHsgdGhyb3R0bGVEZWxheTogdGhpcy5vcHRzLCBwYXNzaXZlOiBmYWxzZSB9O1xuICAgIH1cblxuICAgIHRoaXMub3B0cyA9IHRoaXMub3B0cyB8fCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIHRocm90dGxlRGVsYXk6IGRlZmF1bHRUaHJvdHRsZURlbGF5XG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdHMudGhyb3R0bGVEZWxheSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMub3B0cy50aHJvdHRsZURlbGF5ID09PSBudWxsKSB7XG4gICAgICB0aGlzLm9wdHMudGhyb3R0bGVEZWxheSA9IGRlZmF1bHRUaHJvdHRsZURlbGF5O1xuICAgIH1cblxuICAgIHRoaXMudGhyb3R0bGVEZWxheSA9IHRoaXMub3B0cy50aHJvdHRsZURlbGF5O1xuICAgIHRoaXMucGFzc2l2ZSA9ICEhdGhpcy5vcHRzLnBhc3NpdmU7XG4gIH1cblxuICBpbml0aWFsaXplKG9wdGlvbnM/OiBJbnRlcnJ1cHRPcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnM/LnBsYXRmb3JtSWQgJiYgaXNQbGF0Zm9ybVNlcnZlcihvcHRpb25zLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZXZlbnRUYXJnZXQgPSB0eXBlb2YgdGhpcy50YXJnZXQgPT09ICdmdW5jdGlvbicgPyB0aGlzLnRhcmdldCgpIDogdGhpcy50YXJnZXQ7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMucGFzc2l2ZSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogbnVsbDtcbiAgICBjb25zdCBmcm9tRXZlbnRzID0gdGhpcy5ldmVudHNcbiAgICAgIC5zcGxpdCgnICcpXG4gICAgICAubWFwKGV2ZW50TmFtZSA9PiBmcm9tRXZlbnQoZXZlbnRUYXJnZXQgYXMgYW55LCBldmVudE5hbWUsIG9wdHMpKTtcbiAgICB0aGlzLmV2ZW50U3JjID0gbWVyZ2UoLi4uZnJvbUV2ZW50cyk7XG4gICAgdGhpcy5ldmVudFNyYyA9IHRoaXMuZXZlbnRTcmMucGlwZShcbiAgICAgIGZpbHRlcihpbm5lckFyZ3MgPT4gIXRoaXMuZmlsdGVyRXZlbnQoaW5uZXJBcmdzKSlcbiAgICApO1xuICAgIGlmICh0aGlzLnRocm90dGxlRGVsYXkgPiAwKSB7XG4gICAgICB0aGlzLmV2ZW50U3JjID0gdGhpcy5ldmVudFNyYy5waXBlKHRocm90dGxlVGltZSh0aGlzLnRocm90dGxlRGVsYXkpKTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyID0gKGlubmVyQXJnczogYW55KSA9PlxuICAgICAgdGhpcy5vbkludGVycnVwdC5lbWl0KG5ldyBJbnRlcnJ1cHRBcmdzKHRoaXMsIGlubmVyQXJncykpO1xuXG4gICAgdGhpcy5hdHRhY2hGbiA9ICgpID0+XG4gICAgICAodGhpcy5ldmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuZXZlbnRTcmMuc3Vic2NyaWJlKGhhbmRsZXIpKTtcblxuICAgIHRoaXMuZGV0YWNoRm4gPSAoKSA9PiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvKlxuICAgKiBDaGVja3MgdG8gc2VlIGlmIHRoZSBldmVudCBzaG91bGQgYmUgZmlsdGVyZWQuIEFsd2F5cyByZXR1cm5zIGZhbHNlIHVubGVzcyBvdmVycmlkZW4uXG4gICAqIEBwYXJhbSBldmVudCAtIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZXZlbnQgc2hvdWxkIGJlIGZpbHRlcmVkIChkb24ndCBjYXVzZSBhbiBpbnRlcnJ1cHQpOyBvdGhlcndpc2UsIGZhbHNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGZpbHRlckV2ZW50KGV2ZW50OiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBvcHRpb25zIGJlaW5nIHVzZWQuXG4gICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgb3B0aW9uIHZhbHVlcy5cbiAgICovXG4gIGdldCBvcHRpb25zKCk6IEV2ZW50VGFyZ2V0SW50ZXJydXB0T3B0aW9ucyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3NpdmU6IHRoaXMucGFzc2l2ZSxcbiAgICAgIHRocm90dGxlRGVsYXk6IHRoaXMudGhyb3R0bGVEZWxheVxuICAgIH07XG4gIH1cbn1cbiJdfQ==