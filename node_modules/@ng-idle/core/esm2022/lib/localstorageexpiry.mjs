import { Injectable } from '@angular/core';
import { IdleExpiry } from './idleexpiry';
import * as i0 from "@angular/core";
import * as i1 from "./localstorage";
/*
 * Represents a localStorage store of expiry values.
 * @extends IdleExpiry
 */
export class LocalStorageExpiry extends IdleExpiry {
    constructor(localStorage) {
        super();
        this.localStorage = localStorage;
        this.idleName = 'main';
    }
    /*
     * Gets or sets the last expiry date in localStorage.
     * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
     * @param value - The expiry value to set; omit to only return the value.
     * @return The current expiry value.
     */
    last(value) {
        if (value !== void 0) {
            this.setExpiry(value);
        }
        return this.getExpiry();
    }
    idling(value) {
        if (value !== void 0) {
            this.setIdling(value);
        }
        return this.getIdling();
    }
    /*
     * Gets the idle name.
     * @return The name of the idle.
     */
    getIdleName() {
        return this.idleName;
    }
    /*
     * Sets the idle name.
     * @param The name of the idle.
     */
    setIdleName(key) {
        if (key) {
            this.idleName = key;
        }
    }
    getExpiry() {
        const expiry = this.localStorage.getItem(this.idleName + '.expiry');
        if (expiry) {
            return new Date(parseInt(expiry, 10));
        }
        else {
            return null;
        }
    }
    setExpiry(value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.expiry', value.getTime().toString());
        }
        else {
            this.localStorage.removeItem(this.idleName + '.expiry');
        }
    }
    getIdling() {
        const idling = this.localStorage.getItem(this.idleName + '.idling');
        if (idling) {
            return idling === 'true';
        }
        else {
            return false;
        }
    }
    setIdling(value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.idling', value.toString());
        }
        else {
            this.localStorage.setItem(this.idleName + '.idling', 'false');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.9", ngImport: i0, type: LocalStorageExpiry, deps: [{ token: i1.LocalStorage }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.9", ngImport: i0, type: LocalStorageExpiry }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.9", ngImport: i0, type: LocalStorageExpiry, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LocalStorage }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxzdG9yYWdlZXhwaXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2xvY2Fsc3RvcmFnZWV4cGlyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7OztBQUcxQzs7O0dBR0c7QUFFSCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsVUFBVTtJQUdoRCxZQUFvQixZQUEwQjtRQUM1QyxLQUFLLEVBQUUsQ0FBQztRQURVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBRnRDLGFBQVEsR0FBRyxNQUFNLENBQUM7SUFJMUIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxDQUFDLEtBQVk7UUFDZixJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFlO1FBQ3BCLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVyxDQUFDLEdBQVc7UUFDckIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFTyxTQUFTO1FBQ2YsTUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM1RSxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVPLFNBQVMsQ0FBQyxLQUFXO1FBQzNCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxFQUN6QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQzNCLENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFTyxTQUFTO1FBQ2YsTUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM1RSxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sTUFBTSxLQUFLLE1BQU0sQ0FBQztTQUMxQjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFTyxTQUFTLENBQUMsS0FBYztRQUM5QixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3hFO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7OEdBaEZVLGtCQUFrQjtrSEFBbEIsa0JBQWtCOzsyRkFBbEIsa0JBQWtCO2tCQUQ5QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWRsZUV4cGlyeSB9IGZyb20gJy4vaWRsZWV4cGlyeSc7XG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2UgfSBmcm9tICcuL2xvY2Fsc3RvcmFnZSc7XG5cbi8qXG4gKiBSZXByZXNlbnRzIGEgbG9jYWxTdG9yYWdlIHN0b3JlIG9mIGV4cGlyeSB2YWx1ZXMuXG4gKiBAZXh0ZW5kcyBJZGxlRXhwaXJ5XG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VFeHBpcnkgZXh0ZW5kcyBJZGxlRXhwaXJ5IHtcbiAgcHJpdmF0ZSBpZGxlTmFtZSA9ICdtYWluJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsU3RvcmFnZTogTG9jYWxTdG9yYWdlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgbGFzdCBleHBpcnkgZGF0ZSBpbiBsb2NhbFN0b3JhZ2UuXG4gICAqIElmIGxvY2FsU3RvcmFnZSBkb2Vzbid0IHdvcmsgY29ycmVjdGx5IChpLmUuIFNhZmFyaSBpbiBwcml2YXRlIG1vZGUpLCB3ZSBzdG9yZSB0aGUgZXhwaXJ5IHZhbHVlIGluIG1lbW9yeS5cbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIGV4cGlyeSB2YWx1ZSB0byBzZXQ7IG9taXQgdG8gb25seSByZXR1cm4gdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJuIFRoZSBjdXJyZW50IGV4cGlyeSB2YWx1ZS5cbiAgICovXG4gIGxhc3QodmFsdWU/OiBEYXRlKTogRGF0ZSB7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuc2V0RXhwaXJ5KHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0RXhwaXJ5KCk7XG4gIH1cblxuICBpZGxpbmcodmFsdWU/OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuc2V0SWRsaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0SWRsaW5nKCk7XG4gIH1cblxuICAvKlxuICAgKiBHZXRzIHRoZSBpZGxlIG5hbWUuXG4gICAqIEByZXR1cm4gVGhlIG5hbWUgb2YgdGhlIGlkbGUuXG4gICAqL1xuICBnZXRJZGxlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlkbGVOYW1lO1xuICB9XG5cbiAgLypcbiAgICogU2V0cyB0aGUgaWRsZSBuYW1lLlxuICAgKiBAcGFyYW0gVGhlIG5hbWUgb2YgdGhlIGlkbGUuXG4gICAqL1xuICBzZXRJZGxlTmFtZShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIHRoaXMuaWRsZU5hbWUgPSBrZXk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBpcnkoKTogRGF0ZSB7XG4gICAgY29uc3QgZXhwaXJ5OiBzdHJpbmcgPSB0aGlzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuaWRsZU5hbWUgKyAnLmV4cGlyeScpO1xuICAgIGlmIChleHBpcnkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShwYXJzZUludChleHBpcnksIDEwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RXhwaXJ5KHZhbHVlOiBEYXRlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICB0aGlzLmlkbGVOYW1lICsgJy5leHBpcnknLFxuICAgICAgICB2YWx1ZS5nZXRUaW1lKCkudG9TdHJpbmcoKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmlkbGVOYW1lICsgJy5leHBpcnknKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldElkbGluZygpOiBib29sZWFuIHtcbiAgICBjb25zdCBpZGxpbmc6IHN0cmluZyA9IHRoaXMubG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5pZGxlTmFtZSArICcuaWRsaW5nJyk7XG4gICAgaWYgKGlkbGluZykge1xuICAgICAgcmV0dXJuIGlkbGluZyA9PT0gJ3RydWUnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRJZGxpbmcodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5pZGxlTmFtZSArICcuaWRsaW5nJywgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5pZGxlTmFtZSArICcuaWRsaW5nJywgJ2ZhbHNlJyk7XG4gICAgfVxuICB9XG59XG4iXX0=